#!/bin/sh
# vi: set ft=sh expandtab shiftwidth=4 tabstop=4:
set -e
set -u
trap ' echo Caught SIGINT >&2 ; exit 1 ; ' INT
trap ' echo Caught SIGTERM >&2 ; exit 1 ; ' TERM
trap ' echo Unexpected exit >&2 ; exit 1 ; ' 0
prog="$(basename -- "$0")"
subprog="${prog##git-}"
niceprog="git $subprog"
test "$prog" != "$subprog" || niceprog="$prog"
die() { trap '' 0 ; echo "error: $@" >&2 ; exit 1 ; }
udie() { trap '' 0 ; usage >&2 ; echo "error: $@" >&2 ; exit 1 ; }
pax() { trap '' 0 ; exit 0 ; }
usage() {
    cat <<EOF
usage: $niceprog [options] -- [<command>]
    -n, --dry-run   print the final command, but don't execute it
    -v, --verbose   print and execute the final command
    -r, --remote    find changes from remote not in local (HEAD..remote) (default)
    -l, --local     find changes from local not in remote (remote..HEAD) (reverses)
    -u, --uni       news in b since last merge base (HEAD..remote) (unidirectional) (default)
    -b, --bidi      all differences since last merge base (HEAD...remote) (bidirectional)
    -p, --patch     when the command is log, pass -p (to show the diffs as well)
EOF
}
testrun=
verbose=
reverse=
diff=..
extra=
command=
patch=
args=0
odone=
arg() {
    if test "$args" -eq 0 ; then args=1 ; command="$1"
    else udie "Too many arguments." ; fi
}
while test $# -gt 0 ; do
    if test -z "$odone" ; then
        case "$1" in
            -n|--dry-run) testrun=1 ; verbose=1 ;;
            -v|--verbose) verbose=1 ;;
            -r|--remote) reverse= ;;
            -l|--local) reverse=1 ;;
            -u|--uni) diff=.. ; extra= ;;
            -b|--bidi) diff=... ; extra="--left-right" ;;
            -p|--patch) patch=1 ;;
            -h|-\?|--help) usage ; pax ;; # but not much point in --help since git catches it
            --) odone=1 ;;
            -) arg "$1" ;;
            -*) udie "Unrecognized option, $1." ;;
            *) arg "$1" ;;
        esac
    elif test "$args" -eq 0 ; then args=1 ; command="$1"
    else break ; fi
    shift
done
go() {
    if test -n "$verbose" ; then echo "$*" ; fi
    if test -z "$testrun" ; then trap '' 0 ; exec "$@" ; fi
}
br="$(git rev-parse --abbrev-ref HEAD)"
if test "$br" = HEAD ; then
    die "Not on any branch so I cannot find the remote branch."
fi
r="$(git config branch."$br".remote)" || die "No remote for $br."
rbr_="$(git config branch."$br".merge)" || die "No remote branch for $br."
rbr="${rbr_##refs/heads/}"
test "$rbr" != "$rbr_" || die "Expected remote branch $rbr_ to be in refs/heads/."
command="${command:-log}"
if test "$command" = log && test -n "$patch" ; then extra="$extra -p" ; fi
if test -n "$reverse" ; then
    go git "$command" $extra "$@" "${r}/$rbr"$diff
else
    go git "$command" $extra "$@" $diff"${r}/$rbr"
fi
pax
